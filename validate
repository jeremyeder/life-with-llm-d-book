#!/bin/bash
# Fast validation script for changed files only
# Usage: ./validate [--all] [file1 file2 ...]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Performance tracking
start_time=$(date +%s)

echo "üöÄ Running fast validation..."

# Determine which files to check
if [ "$1" = "--all" ]; then
    echo "üìÅ Validating all files (full project scan)"
    FILES_TO_CHECK=""
    FULL_SCAN=true
elif [ $# -gt 0 ]; then
    echo "üìÅ Validating specified files: $*"
    FILES_TO_CHECK="$*"
    FULL_SCAN=false
else
    echo "üìÅ Detecting changed files..."
    # Get changed files (staged + unstaged + untracked)
    FILES_TO_CHECK=$(git diff --name-only HEAD 2>/dev/null || echo "")
    STAGED_FILES=$(git diff --cached --name-only 2>/dev/null || echo "")
    UNTRACKED_FILES=$(git ls-files --others --exclude-standard 2>/dev/null || echo "")
    
    FILES_TO_CHECK="$FILES_TO_CHECK $STAGED_FILES $UNTRACKED_FILES"
    FILES_TO_CHECK=$(echo $FILES_TO_CHECK | tr ' ' '\n' | sort -u | tr '\n' ' ')
    
    if [ -z "$(echo $FILES_TO_CHECK | tr -d ' ')" ]; then
        echo "‚úÖ No changed files detected, nothing to validate"
        exit 0
    fi
    
    echo "üìã Changed files: $FILES_TO_CHECK"
    FULL_SCAN=false
fi

# Track validation results
ERRORS=0
WARNINGS=0

# Function to check markdown files
check_markdown() {
    local files="$1"
    if [ -z "$files" ]; then
        return 0
    fi
    
    echo "üìù Checking markdown files..."
    
    # Filter for .md files
    md_files=$(echo $files | tr ' ' '\n' | grep '\.md$' | tr '\n' ' ')
    
    if [ -z "$(echo $md_files | tr -d ' ')" ]; then
        echo "  ‚ÑπÔ∏è No markdown files to check"
        return 0
    fi
    
    # Run markdownlint on specific files
    if command -v npx >/dev/null 2>&1; then
        if npx markdownlint-cli $md_files 2>/dev/null; then
            echo "  ‚úÖ Markdown linting passed"
        else
            echo -e "  ${YELLOW}‚ö†Ô∏è Markdown linting issues found${NC}"
            WARNINGS=$((WARNINGS + 1))
        fi
    else
        echo "  ‚ÑπÔ∏è markdownlint not available, skipping"
    fi
}

# Function to check technical terms
check_technical_terms() {
    local files="$1"
    if [ -z "$files" ]; then
        return 0
    fi
    
    echo "üîç Checking technical terms..."
    
    # Filter for .md files
    md_files=$(echo $files | tr ' ' '\n' | grep '\.md$' | tr '\n' ' ')
    
    if [ -z "$(echo $md_files | tr -d ' ')" ]; then
        echo "  ‚ÑπÔ∏è No markdown files to check"
        return 0
    fi
    
    # Check for forbidden model name patterns
    forbidden_patterns=("llama-8b" "llama-70b" "mistral-8b")
    found_issues=false
    
    for pattern in "${forbidden_patterns[@]}"; do
        if echo $md_files | xargs grep -l "$pattern" 2>/dev/null; then
            echo -e "  ${RED}‚ùå Found forbidden pattern: $pattern${NC}"
            found_issues=true
            ERRORS=$((ERRORS + 1))
        fi
    done
    
    if [ "$found_issues" = false ]; then
        echo "  ‚úÖ Technical terms check passed"
    fi
}

# Function to check Python files
check_python() {
    local files="$1"
    if [ -z "$files" ]; then
        return 0
    fi
    
    echo "üêç Checking Python files..."
    
    # Filter for .py files
    py_files=$(echo $files | tr ' ' '\n' | grep '\.py$' | tr '\n' ' ')
    
    if [ -z "$(echo $py_files | tr -d ' ')" ]; then
        echo "  ‚ÑπÔ∏è No Python files to check"
        return 0
    fi
    
    # Basic syntax check
    syntax_errors=false
    for file in $py_files; do
        if [ -f "$file" ]; then
            if ! python -m py_compile "$file" 2>/dev/null; then
                echo -e "  ${RED}‚ùå Syntax error in $file${NC}"
                syntax_errors=true
                ERRORS=$((ERRORS + 1))
            fi
        fi
    done
    
    if [ "$syntax_errors" = false ]; then
        echo "  ‚úÖ Python syntax check passed"
    fi
}

# Function to check YAML files
check_yaml() {
    local files="$1"
    if [ -z "$files" ]; then
        return 0
    fi
    
    echo "üìã Checking YAML files..."
    
    # Filter for .yaml and .yml files
    yaml_files=$(echo $files | tr ' ' '\n' | grep -E '\.(yaml|yml)$' | tr '\n' ' ')
    
    if [ -z "$(echo $yaml_files | tr -d ' ')" ]; then
        echo "  ‚ÑπÔ∏è No YAML files to check"
        return 0
    fi
    
    # Check YAML syntax
    if command -v python >/dev/null 2>&1; then
        yaml_errors=false
        for file in $yaml_files; do
            if [ -f "$file" ]; then
                if ! python -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                    echo -e "  ${RED}‚ùå YAML syntax error in $file${NC}"
                    yaml_errors=true
                    ERRORS=$((ERRORS + 1))
                fi
            fi
        done
        
        if [ "$yaml_errors" = false ]; then
            echo "  ‚úÖ YAML syntax check passed"
        fi
    else
        echo "  ‚ÑπÔ∏è Python not available for YAML validation"
    fi
}

# Function to check CLAUDE.md changes
check_claude_md() {
    local files="$1"
    if [ -z "$files" ]; then
        return 0
    fi
    
    if echo $files | grep -q "CLAUDE\.md"; then
        echo "ü§ñ CLAUDE.md change detected"
        echo -e "  ${YELLOW}‚ö†Ô∏è CLAUDE.md changes require team approval${NC}"
        echo "  üìù Remember: announce in team chat, wait 24 hours before merge"
        WARNINGS=$((WARNINGS + 1))
    fi
}

# Run all checks
if [ "$FULL_SCAN" = true ]; then
    # Full project validation
    check_markdown "$(find docs examples -name '*.md' 2>/dev/null | tr '\n' ' ')"
    check_technical_terms "$(find docs examples -name '*.md' 2>/dev/null | tr '\n' ' ')"
    check_python "$(find examples tests -name '*.py' 2>/dev/null | tr '\n' ' ')"
    check_yaml "$(find examples -name '*.yaml' -o -name '*.yml' 2>/dev/null | tr '\n' ' ')"
else
    # Changed files only
    check_markdown "$FILES_TO_CHECK"
    check_technical_terms "$FILES_TO_CHECK"
    check_python "$FILES_TO_CHECK"
    check_yaml "$FILES_TO_CHECK"
    check_claude_md "$FILES_TO_CHECK"
fi

# Performance summary
end_time=$(date +%s)
duration=$((end_time - start_time))

echo ""
echo "üìä Validation Summary:"
echo "  ‚è±Ô∏è Duration: ${duration}s"
echo "  ‚ùå Errors: $ERRORS"
echo "  ‚ö†Ô∏è Warnings: $WARNINGS"

if [ $ERRORS -gt 0 ]; then
    echo -e "${RED}üí• Validation failed with $ERRORS errors${NC}"
    exit 1
elif [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Validation completed with $WARNINGS warnings${NC}"
    exit 0
else
    echo -e "${GREEN}‚úÖ Validation passed! Ready to commit.${NC}"
    exit 0
fi